doctype html
html(lang='en')
  include ../includes/head.jade
  body
    include ../includes/navbar.jade

    .container-fluid
      .row.side-body.hidden-xs
        .col-sm-12
          h2.fa.fa-2x.fa-cube &nbsp;Object&nbsp;
            strong #{object.name}
          if (message && message.type && message.value)
            div.alert(class='alert-#{message.type}', role='alert') !{message.value}

      .row.side-body
        .col-sm-12.col-md-8.col-md-offset-0
          div
            dl.dl-horizontal
              dt Name:
              dd
                strong #{object.name}
                br/
                i Created: #{moment(object.meta.created).format('DD/MM/YYYY, HH:mm')} - Updated: #{moment(object.meta.updated).format('DD/MM/YYYY, HH:mm')} - Revision: #{object.meta.revision}
            
              dt Id:
              dd
                span.label.label-default.ellipis.fa.fa-cube  #{object.id} 
 
              dt Type:
              - if (object.type == 'rooter')
                - var style = "fa fa-inbox"
              - else if (object.type == 'sensor')
                - var style = "fa fa-tint"
              - else if (object.type == 'computer')
                - var style = "fa fa-desktop"
              - else if (object.type == 'laptop')
                - var style = "fa fa-laptop"
              - else if (object.type == 'desktop')
                - var style = "fa fa-desktop"
              - else if (object.type == 'phone')
                - var style = "fa fa-phone"
              - else if (object.type == 'smartphone')
                - var style = "fa fa-phone"
              - else if (object.type == 'nodemcu')
                - var style = "fa fa-shield"
              - else if (object.type == 'tablet')
                - var style = "fa fa-tablet"
              - else if (object.type == 'server')
                - var style = "fa fa-tasks"
              - else if (object.type == 'printer')
                - var style = "fa fa-print"
              - else if (object.type == 'microchip')
                - var style = "fa fa-microchip"
              - end
              dd
                a.label.label-default(href='#', class="#{style}")   #{object.type}
            
              -if (object.position)
                dt Position/Location:
                dd
                  a.label.label-primary(href='#') #{object.position}
              -end
            
              -if (object.ipv4)
                dt Ip v4:
                dd
                  span.label.label-danger #{object.ipv4}
              -end
            
              -if (object.ipv6)
                dt Ip v6:
                dd
                  span.label.label-danger #{object.ipv6}
              -end
            
              dt Description:
              dd !{nl2br(striptags(object.description))}

              - if(object.latitude && object.longitude)
                dt Latitude:
                dd
                  span.fa.fa-map(data-toggle='tooltip', data-placement='top', title='Latitude')  #{object.latitude}

                dt Longitude:
                dd
                  span.fa.fa-map(data-toggle='tooltip', data-placement='top', title='Longitude')  #{object.longitude}
            
                dt Map:
                dd
                  a(href='geo:#{object.latitude},#{object.longitude}?z=18') Geo link
                  br/
                  #osm(style='height:350px;width:100%')
              - end
                
              dt
              dd
                p 
                ul.list-inline
                  li
                    a.btn.btn-primary.btn-sm(href='./#{object.id}/edit')
                      span.fa.fa-pencil-square-o  Edit
                  li
                    a.btn.btn-danger.btn-sm.sweet-5#remove(href='#', onclick="return false;")
                      span.fa.fa-trash-o  Delete Object
              
        .col-sm-12.col-md-4.col-md-offset-0
          .with-nav-tabs
            ul.nav.nav-tabs.nav-justified
              li.active(role='presentation')
                a.fa.fa-qrcode(href='#qrcode', data-toggle='tab')  QR Code
              li
                a.fa.fa-rocket(href='#parameters', data-toggle='tab')  Custom Parameters
              li
                a.fa.fa-terminal(href='#api', data-toggle='tab')  API

            .tab-content.col-sm-12
              .tab-pane.fade.in.active#qrcode
                h3 QR code
                div
                  -if (object.isPublic == 'true')
                    span.fa.fa-eye Visibility:
                    strong
                      small  Public
                    p.text-center.img-responsive.center-block !{qr_img}
                      br/
                      a.btn.btn-default.btn-sm(href='./#{object.id}/qrprint', onclick='window.open(this.href, "qrprint", "width=800,height=300,scrollbars=yes");return false;')
                        span.fa.fa-print  Print
                      | &nbsp;
                      a.btn.btn-primary.fa.fa-share-alt(href='./#{object.id}/public', target='_blank')  Share
                  -else
                    span.fa.fa-eye-slash Visibility:
                    strong
                      small  Private
                    br/
                    .alert.alert-warning
                      span.fa.fa-comment  That Object is only visible to you, QRCode is not available for Private Objects.
                  -end
            
              .tab-pane.fade#parameters
                h3 Custom Parameters
                -if ( object.parameters && object.parameters.length )
                  ul.list-unstyled.list-group
                    - for( p in object.parameters )
                      li.clearfix.list-group-item
                        div.label.label-primary.ellipis #{object.parameters[p].name}
                        span &nbsp;
                        div.label.label-danger  #{object.parameters[p].type}&nbsp;
                        span &nbsp;:&nbsp;
                        div.label.label-default.pull-right  #{object.parameters[p].value}
                    -end
                -else
                  div.alert.alert-warning.clearfix That Object does not have any custom parameter.
                    div
                      a.pull-right.btn.btn-primary.btn-sm(href='./#{object.id}/edit')
                        span.fa.fa-pencil-square-o  Add Custom Parameters
                -end

              .tab-pane.fade#api
                  h3 Object endpoint

                  div.alert.alert-warning
                    div.fa.fa-comment  Be sure you grant access to this Object from 
                      a.btn.btn-primary.fa.fa-flash(href='/keys')  API Key 

                  span.label.label-default.ellipis #{baseUrl}/v#{version}/objects/#{object.id}
                  br/
                  span e.g.: 
                  pre.language-markup curl -X GET -i #{baseUrl}/v#{version}/objects/#{object.id} -H "Accept: application/json" -H "Content-Type: application/json" -H 'Connection: keep-alive' -H 'Authorization: Bearer :bearer'

                  h3 Get Parameter value
                  span.label.label-default.ellipis #{baseUrl}/v#{version}/objects/#{object.id}/:pName/
                  br/
                  i ':pName' stand for the parameter name you want to retrieve.
                  br/
                  span e.g.: Get value from parameter name:
                  pre.language-markup curl -X GET -i #{baseUrl}/v#{version}/objects/#{object.id}/:pName/ -H "Accept: application/json" -H "Content-Type: application/json" -H 'Connection: keep-alive' -H 'Authorization: Bearer :bearer'

                  h3 Edit Parameter value
                  span.label.label-default.ellipis #{baseUrl}/v#{version}/objects/#{object.id}/:pName/
                  br/
                  i ':pName' stand for the parameter name you want to edit.
                  br/
                  span e.g.: Edit value from parameter name:
                  pre.language-markup curl -X PUT -i #{baseUrl}/v#{version}/objects/#{object.id}/:pName/ -H "Accept: application/json" -H "Content-Type: application/json" -H 'Connection: keep-alive' -H 'Authorization: Bearer :bearer' -d '{"value": "foobar"}'

          #popup(title='#{object.name}')  

    include ../includes/foot.jade
      link(href='#{baseUrlCdn}/css/sweetalert/sweetalert.css', rel='stylesheet')
      script(src='#{baseUrlCdn}/js/sweetalert/sweetalert.js')
      - if ( !object.longitude ) {
        - object.longitude = 0
      - }
      - if ( !object.latitude ) {
        - object.latitude = 0
      - }
      link(rel="stylesheet", href="#{baseUrlCdn}/css/OpenLayers/ol.css")
      script(type='text/javascript', src='#{baseUrlCdn}/js/OpenLayers/OpenLayers-3.20.1.min.js')
      script(type='text/javascript').
        $(document).ready(function() {
          var iconFeature = new ol.Feature({
            geometry: new ol.geom.Point(new ol.proj.transform([#{object.longitude}, #{object.latitude}], 'EPSG:4326', 'EPSG:3857')),
            name: '#{object.name}',
            position: '#{object.position}',
          });
          var iconStyle = new ol.style.Style({
              image: new ol.style.Icon(({
                anchor: [12, 12],
                anchorXUnits: 'pixels',
                anchorYUnits: 'pixels',
                opacity: .8,
                size: [24, 24],
                src: '#{baseUrlCdn}/js/OpenLayers/img/marker.png'
             }))
          });
          iconFeature.setStyle(iconStyle);
          var vectorSource = new ol.source.Vector({});
          vectorSource.addFeature(iconFeature);
          var vectorLayer = new ol.layer.Vector({
            source: vectorSource
          });
          var popup = new ol.Overlay({
            element: document.getElementById('popup'),
            //positioning: 'top',
            stopEvent: false
          });
          
          var map = new ol.Map({
            layers: [
              new ol.layer.Tile({ source: new ol.source.OSM() }),
              vectorLayer,
            ],
            target: 'osm',
            view: new ol.View({
              center: ol.proj.fromLonLat([#{object.longitude}, #{object.latitude}]),
              zoom: 19
            })
          });
          map.addOverlay(popup);
                    
          map.on('click', function(evt) {
            var lonLat = new ol.proj.transform(evt.coordinate, 'EPSG:3857', 'EPSG:4326');

            var feature = map.forEachFeatureAtPixel(evt.pixel, function(feature) { return feature; });
            if (feature) {
              var coordinates = feature.getGeometry().getCoordinates();
              popup.setPosition(coordinates);
              $('#popup').popover({
                'placement': 'top',
                'html': false,
                'content': feature.get('position')
              });
              $('#popup').popover('show');
            } else {
              $('#popup').popover('destroy');
            }
          });
        });
      script.
        $(document).ready(function() {
          document.querySelector('.sweet-5').onclick = function(){
            swal({
              title: "Are you sure?",
              text: "Are you sure to delete #{object.name} ?",
              type: "error",
              showCancelButton: true,
              confirmButtonClass: "btn-danger",
              confirmButtonText: "Yes, delete it!",
              cancelButtonText: "No, cancel",
              closeOnConfirm: false,
              closeOnCancel: true
            },
            function(isConfirm) {
              if (isConfirm) {
                document.location.href='./#{object.id}/remove';
              } else {
                //
              }
            });
          };
        });