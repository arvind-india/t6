doctype html
html(lang='en')
  include ../includes/head.jade
  body
    include ../includes/navbar.jade

    .container-fluid
      .row.side-body
        .col-sm-12.hidden-xs
          h2.fa.fa-2x.fa-cube &nbsp;Add Object to your shelves

        -if (message && message.type == 'danger' && message.value)
        .col-sm-12(class='alert alert-#{message.type}')#add
          div.sidebar-module-inset
            if (message && message.type && message.value)
              div.alert(class='alert-#{message.type}', role='alert') #{message.value}

            form(action="/objects/add#add", method="post")
              .form-group
                label.control-label(for="name") Object Name:
                  span.mandatory *
                span.input-group
                  span.input-group-addon
                    span.fa.fa-cubes
                  input.form-control(type="text", name="name", placeholder="Object Name", id="name", value=new_object.name)

              .form-group
                label.control-label(for="Type") Type:
                  span.mandatory *
                span.input-group
                  span.input-group-addon
                    span.fa.fa-microchip
                  select.form-control(type="text", name="type", id="type")
                    option(value='') Please select a type
                    - for(type in types) {
                      if (new_object.type == types[type])
                        option(value='#{types[type]}' selected) #{types[type]}
                      else
                        option(value='#{types[type]}') #{types[type]}
                    - }

              .form-group
                label.control-label(for="Position") Position/Location:
                span.input-group
                  span.input-group-addon
                    span.fa.fa-map-marker
                  input.form-control(type="text", name="position", placeholder="Object position (living, dressing, etc)", id="Position", value=new_object.position)

              .form-group
                label.control-label(for="Longitude") Longitude:
                span.input-group
                  span.input-group-addon
                    span.fa.fa-map
                  input.form-control(type="text", name="longitude", placeholder="Longitude", id="Longitude", value=new_object.longitude)

              .form-group
                label.control-label(for="Latitude") Latitude:
                span.input-group
                  span.input-group-addon
                    span.fa.fa-map
                  input.form-control(type="text", name="latitude", placeholder="Latitude", id="Latitude", value=new_object.latitude)

              .form-group
                label.control-label(for="ipv6") Map:
                #osm(style='height:350px;width:100%')

              .form-group
                label.control-label(for="Ipv4") Ip v4:
                span.input-group
                  span.input-group-addon
                    span IP
                  input.form-control(type="text", name="ipv4", placeholder="Ip v4: 192.168.0.1", id="Ipv4", value=new_object.ipv4)
              
              .form-group
                label.control-label(for="Ipv6") Ip v6:
                span.input-group
                  span.input-group-addon
                    span IP
                  input.form-control(type="text", name="ipv6", placeholder="Ip v6", id="Ipv6", value=new_object.ipv6)

              .form-group
                label.control-label(for="Description") Description:
                span.input-group
                  span.input-group-addon
                    span.fa.fa-pencil-square-o
                  textarea.form-control.vresize(name="description", placeholder="Object description", id="Description")= new_object.description

              .form-group
                label.control-label Public Visibility:
                br/
                input(type='radio', name='isPublic', value='true', id='isPublic', checked=(new_object.isPublic=='true' ? "checked" : undefined))
                label.control-label(for="isPublic") &nbsp;Yes
                | &nbsp;&nbsp;
                input(type='radio', name='isPublic', value='false', id='isNotPublic', checked=(new_object.isPublic=='false' ? "checked" : undefined))
                label.control-label(for="isNotPublic") &nbsp;No

              
              .form-group
                hr/
                h3 Custom Parameters
                .table-header
                  span.input-group
                    strong Type
                  span.input-group
                    strong Name
                  span.input-group
                    strong Value
                  span.input-group
                    strong 

                ul.customParameter.list-unstyled

                button.input-group.btn.btn-success(type="button")
                  span.fa.fa-plus
                
              .form-group
                button.btn.btn-primary.m-t.pull-right
                  span.fa.fa-plus  Add Object
              
              p &nbsp;
          #popup(title='#{new_object.name}')  

    include ../includes/foot.jade
      - if ( !new_object.longitude ) {
        - new_object.longitude = 0
      - }
      - if ( !new_object.latitude ) {
        - new_object.latitude = 0
      - }
      link(rel="stylesheet", href="#{baseUrlCdn}/css/OpenLayers/ol.css")
      script(type='text/javascript', src='#{baseUrlCdn}/js/OpenLayers/OpenLayers-3.20.1.min.js')
      script(type='text/javascript').
        $(document).ready(function() {
          
          var iconFeature = new ol.Feature({
            geometry: new ol.geom.Point(new ol.proj.transform([#{new_object.longitude}, #{new_object.latitude}], 'EPSG:4326', 'EPSG:3857')),
            name: '#{new_object.name}',
            position: '#{new_object.position}',
          });
          var iconStyle = new ol.style.Style({
              image: new ol.style.Icon(({
                anchor: [12, 12],
                anchorXUnits: 'pixels',
                anchorYUnits: 'pixels',
                opacity: .8,
                size: [24, 24],
                src: '#{baseUrlCdn}/js/OpenLayers/img/marker.png'
             }))
          });
          iconFeature.setStyle(iconStyle);
          var vectorSource = new ol.source.Vector({});
          vectorSource.addFeature(iconFeature);
          var vectorLayer = new ol.layer.Vector({
            source: vectorSource
          });
          var popup = new ol.Overlay({
            element: document.getElementById('popup'),
            //positioning: 'top',
            stopEvent: false
          });
          
          var map = new ol.Map({
            layers: [
              new ol.layer.Tile({ source: new ol.source.OSM() }),
              vectorLayer,
            ],
            target: 'osm',
            view: new ol.View({
              center: ol.proj.fromLonLat([#{new_object.longitude}, #{new_object.latitude}]),
              zoom: 19
            })
          });
          map.addOverlay(popup);
                    
          map.on('click', function(evt) {
            var lonLat = new ol.proj.transform(evt.coordinate, 'EPSG:3857', 'EPSG:4326');
            $('#Longitude').val(Math.round(lonLat[0]*100000)/100000);
            $('#Latitude').val(Math.round(lonLat[1]*100000)/100000);

            var feature = map.forEachFeatureAtPixel(evt.pixel, function(feature) { return feature; });
            if (feature) {
              var coordinates = feature.getGeometry().getCoordinates();
              popup.setPosition(coordinates);
              $('#popup').popover({
                'placement': 'top',
                'html': false,
                'content': feature.get('position')
              });
              $('#popup').popover('show');
            } else {
              $('#popup').popover('destroy');
            }
          });
          map.on('pointermove', function(e) {
            if (e.dragging) {
              $('#popup').popover('destroy');
              return;
            }
            var pixel = map.getEventPixel(e.originalEvent);
            var hit = map.hasFeatureAtPixel(pixel);
            //map.getTarget().style.cursor = hit ? 'pointer' : '';
          });
        });
        
        $(document).ready(function() {
          $(".customParameter li button.btn-danger").click(function() {
            var id = $(this).data('id');
            $("#"+id).remove();
          });
          $(".btn-success").click(function() {
            var id = $(".customParameter li").length;
            var liste = $(".customParameter");
            var li = $('<li id="parameter'+id+'" class="form-group"><label for="pnames['+id+']" class="control-label">Parameter '+id+':</label><span class="input-group"><span class="input-group-addon"><span>String</span></span><span class="input-group-addon" style="width: 50%;"><input name="pnames[]" placeholder="Parameter ['+id+'] Name" id="pnames['+id+']" value="" class="form-control" type="text"></span><span class="input-group-addon" style="width: 50%;"><input name="pvalues[]" placeholder="Parameter ['+id+'] Value" id="pvalues['+id+']" value="" class="form-control" type="text"></span><span class="input-group-addon"><button type="button" data-id="parameter'+id+'" class="input-group btn btn-danger"><span class="fa fa-minus"></span></button></span></span></li>');
            liste.append(li);
            $(".customParameter li button.btn-danger").click(function() {
              var id = $(this).data('id');
              console.log(id);
              $("#"+id).remove();
            });
          });
        });