doctype html
html(lang='en')
  include ./includes/head.jade
  body
    include ./includes/navbar.jade

    .container-fluid
      .row.side-body.hidden-xs
        .col-sm-12
          h2.fa.fa-2x.fa-filter &nbsp;Decision Rules
        blockquote.fa.fa-comment  "Decision-Rule" engine is not yet pushed to github. But a working stable implementation is working at home since several months. To sum up, events are pushed as json payloads to mqtt topics. Then the engine is watching for these payloads and handle them according to specific rules.

      .row.side-body
        .col-xs-12.col-sm-12.col-md-12
          ul.clearfix.pagination
            li.active
              span.fa.fa-3x.fa-filter(style='border-bottom-left-radius:0;border-bottom-right-radius:0;')  #{rules_length} Rules
                - var percent = Math.round((rules_length*100/quota.rules)*100) /100
                - var style = "success"
                - if (percent > 60)
                  - style = "warning"
                - end
                - if (percent > 85)
                  - style = "danger"
                - end
                - if (percent < 1)
                  - percent = 1
                  - percent_txt = '<1'
                - else
                  - percent_txt = percent
                - end
              p.progress-bar.progress-bar-striped.active(data-toggle='tooltip', data-placement='top', title='#{percent_txt}%', class="progress-bar-#{style}", role="progressbar", aria-valuenow="#{rules_length}", aria-valuemin="0", aria-valuemax="#{quota.rules}", style="width: #{percent}%; height: 5px;") &nbsp;

    .container-fluid
      .row.side-body
        #accordion.col-sm-12.panel-group(role='tablist', aria-multiselectable='true')
          ol#sortable
            - for(rule in rules) {
              include ./includes/rule_item_list.jade
            - }

    include ./includes/foot.jade

//- Rules
link(href='/css/query-builder/query-builder.2.3.3.css', rel='stylesheet')
link(href='/css/bootstrap-slider/bootstrap-slider-7.1.1.css', rel='stylesheet')
link(href='/css/awesome-bootstrap-checkbox/awesome-bootstrap-checkbox.css', rel='stylesheet')
script(src='/js/doT/doT.min.js')
script(src='/js/jQuery.extendext/jQuery.extendext-0.1.1.min.js')
script(src='/js/bootstrap-select/bootstrap-select-1.10.0.min.js')
script(src='/js/bootbox/bootbox-4.4.0.min.js')
script(src='/js/bootstrap-slider/bootstrap-slider-7.1.1.min.js')
script(src='/js/selectize.js/selectize-0.12.1.min.js')
script(src='/js/query-builder/query-builder-2.3.3.min.js')
script(type='text/javascript').
  var container = $('#sortable');
  if (container.length) {
    var sort = Sortable.create(container, {
      animation: 150,
      onUpdate: function (evt) {
         var item = evt.item;
      }
    });
  }
  var filters = [{
    id: 'mqtt_topic',
    label: 'MQTT Topic',
    type: 'string',
    description: 'MQTT Topic set when you calls the API.',
    operators: ['equal', 'not_equal', 'in', 'not_in', 'begins_with', 'not_begins_with', 'contains', 'not_contains', 'ends_with', 'not_ends_with', 'is_empty', 'is_not_empty', 'is_null', 'is_not_null']
  }, {
    id: 'value',
    label: 'Value',
    type: 'double',
    validation: {
      step: 0.1
    },
    description: 'The Value sent to TimeSeries.'
  }, {
    id: 'previousValue',
    label: 'Previous Value',
    type: 'double',
    validation: {
      step: 0.1
    },
    description: 'The Value which was sent to TimeSeries just before Value.'
  }, {
    id: 'deltaValue',
    label: 'Delta Value',
    type: 'double',
    validation: {
      step: 0.1
    },
    description: 'The Difference between previous Value and current Value.',
    operators: ['equal', 'not_equal', 'less', 'less_or_equal', 'greater', 'greater_or_equal', 'between', 'not_between']
  }, {
    id: 'isDayTime',
    label: 'is Day Time',
    type: 'integer',
    input: 'radio',
    values: {
      1: 'Yes',
      0: 'No'
    },
    colors: {
      1: 'success',
      0: 'danger'
    },
    description: 'Between sunshine and sunset.',
    operators: ['equal', 'not_equal']
  }, {
    id: 'environment',
    label: 'Environment',
    type: 'string',
    input: 'select',
    values: {
      'production': 'Production',
      'development': 'Development'
    },
    description: 'Allows to set actions based on the server Environment.',
    operators: ['equal', 'not_equal']
  }];
  