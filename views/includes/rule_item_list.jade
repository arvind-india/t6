li.panel(class=(rules[rule].on==true ? "panel-success" : "panel-danger"))
  div.list-group-item.panel-heading(role='tab', id='Heading#{rules[rule].id}', class=(rules[rule].on==true ? "" : " progress-bar-striped"))
    h4.panel-title
      - if ( rules[rule].on == true ) {
        a.glyphicon.glyphicon-expand(role='button', data-toggle='collapse', data-parent='#accordion', href='##{rules[rule].id}', aria-expanded='false', aria-controls='#{rules[rule].id}') #{rules[rule].name}
      - } else {
        a.glyphicon.glyphicon-unchecked(role='button', data-toggle='collapse', data-parent='#accordion', href='##{rules[rule].id}', aria-expanded='false', aria-controls='#{rules[rule].id}') #{rules[rule].name}
      - }
      | &nbsp;
      span.label.label-info Priority: #{rules[rule].priority}&nbsp;
      a.fa.fa-plus.pull-right(role='button', data-toggle='collapse', data-parent='#accordion', href='##{rules[rule].id}', aria-expanded='false', aria-controls='#{rules[rule].id}')

  div.panel-body.panel-collapse.collapse(id='#{rules[rule].id}', role='tabpanel', aria-labelledby='Heading#{rules[rule].id}')
    div.panel-body Status:
      br
      div.radio.radio-success
        input(type='radio', name='#{rules[rule].id}on', value='true', id='#{rules[rule].id}True', checked=(rules[rule].on==true ? "checked" : undefined))
        label(for='#{rules[rule].id}True') &nbsp;On
      div.radio.radio-danger
        input(type='radio', name='#{rules[rule].id}on', value='false', id='#{rules[rule].id}False', checked=(rules[rule].on==false ? "checked" : undefined))
        label(for='#{rules[rule].id}False') &nbsp;Off

    div.panel-body Flow Control: (#{rules[rule].flow_control})
      br
      .col-sm-4.radio.flow_control
        input(type='radio', name='flow_control#{rules[rule].id}', value='next', id='#{rules[rule].id}next', checked=(rules[rule].flow_control==="next" ? "checked" : undefined))
        label(for='#{rules[rule].id}next') &nbsp;Continues to next Rule
        br
        input(type='radio', name='flow_control#{rules[rule].id}', value='stop', id='#{rules[rule].id}stop', checked=(rules[rule].flow_control==="stop" ? "checked" : undefined))
        label(for='#{rules[rule].id}stop') &nbsp;Stop Rules
        br
        input(type='radio', name='flow_control#{rules[rule].id}', value='restart', id='#{rules[rule].id}restart', checked=(rules[rule].flow_control==="restart" ? "checked" : undefined))
        label(for='#{rules[rule].id}restart') &nbsp;Restart Rules
      .col-sm-8
        blockquote.fa.fa-comment  Flow Control: Stop refers to stop processing the rule engine. Restart tells the rule engine to start applying all the rules again to the fact. Next is to instruct the rule engine to continue applying the rest of the rules to the fact before stoping.

    div.panel-body Consequence:&nbsp;
      span.label.label-info SMS
      | &nbsp;
      span.label.label-info Email
      | &nbsp;
      span.label.label-info Arduino TinyDisplay

    div.panel-body Condition:

    div.panel-footer 
      a.btn.btn-primary.btn-xs(href="#", id='Export#{rules[rule].id}')
        span.glyphicon.glyphicon-share-alt  Export Rule
      | &nbsp;
      a.btn.btn-info.btn-xs(href="#", id='Share#{rules[rule].id}')
        span.glyphicon.glyphicon-retweet  Share Rule
      | &nbsp;
      a.btn.btn-danger.btn-xs(href="#", id='Delete#{rules[rule].id}')
        span.fa.fa-trash-o   Delete
      | &nbsp;
      a.btn.btn-success.btn-xs.pull-right(href="#", id='Save#{rules[rule].id}')
        span.glyphicon.glyphicon-check  Save Rule
  
    script(type='text/javascript').
      if ( rules === undefined ) var rules = new Array(); rules['#{rules[rule].id}'] = !{JSON.stringify(rules[rule].condition)};

    - if ( rules[rule].condition.condition ) {
      script(type='text/javascript').
        $(function () { $('##{rules[rule].id}').queryBuilder({ plugins: [ 'filter-description', 'bt-tooltip-errors', 'bt-checkbox' ], filters: filters, rules: rules['#{rules[rule].id}'] }); })
    - } else {
      script(type='text/javascript').
        $(function () { $('##{rules[rule].id}').queryBuilder({ plugins: [ 'filter-description', 'bt-tooltip-errors', 'bt-checkbox' ], filters: filters }); })
    - }

    script(type='text/javascript').
      $('#Save#{rules[rule].id}').on('click', function() {
        var myRules = {};
        myRules.condition = $('##{rules[rule].id}').queryBuilder('getRules');
        if ( myRules.condition.condition ) {
          myRules.name = $('#Heading#{rules[rule].id} h4 a').text();
          myRules.priority = ($('#Heading#{rules[rule].id}').parent().parent().find('> li').size()) - ($('#Heading#{rules[rule].id}').parent().index());
          myRules.on = $('##{rules[rule].id}True').is(':checked')!==false?true:false;
          myRules.flow_control = $('##{rules[rule].id} div div.flow_control input:radio:checked').val();
          myRules.consequence = {};
          
          $.ajax({
            type: "POST",
            contentType: 'application/json',
            dataType: 'json',
            processData: true,
            url: '/decision-rules/save-rule/#{rules[rule].id}',
            data: JSON.stringify(myRules, null, 0),
            success: function (saved) {
              $.notify({ icon: 'glyphicon glyphicon-check', title: '<strong>Rule "#{rules[rule].name}"</strong><br />', message: 'Your rule (#{rules[rule].id}) have been successfully updated.' },{ type: 'success' });
            }
          });
        }
        return false;
      });
      $('#Delete#{rules[rule].id}').on('click', function() {
        return false;
      });
      $('#Share#{rules[rule].id}').on('click', function() {
        var myRules = $('##{rules[rule].id}').queryBuilder('getRules');
        if (myRules.condition) alert('Please Copy-Paste to send (manually) to your friends:\n' + JSON.stringify(myRules, null, 0));
        return false;
      });
      $('#Export#{rules[rule].id}').on('click', function() {
        var myRules = $('##{rules[rule].id}').queryBuilder('getRules');
        if (myRules.condition) alert(JSON.stringify(myRules, null, 0));
        return false;
      });