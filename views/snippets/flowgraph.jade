- var rnd = Math.floor(Math.random()*1000)
- if ( !graph_layout ) {
  - graph_layout = "12"
- }
- if ( currentUrl.indexOf("snippets") > -1 ) {
  doctype html
  html(lang='en')
    include ../includes/head.jade
- }

    style.
      body { margin: 0; }
      #body#{rnd} .panel-default > .panel-heading { background-color: #{snippet.p.background}; }
      #body#{rnd} .panel-default > .panel-footer { background-color: #{snippet.p.background}; }
      #body#{rnd} { margin: 0; padding: 0; border-radius: 0.5em; margin: .5em; }
      h1#title#{rnd} { color: #fff; font-size: 3em; margin: 0 0 .3em 0; }
      .icon#icon#{rnd} { color: #fff; font-size: 4em; }
      .value#value#{rnd} { color: #fff; font-size: 3em; margin: .3em 0 0 0; }
      .date#date#{rnd} { color: #fff; }
      .carousel-control { background: none !important; width: 3em; }
      .carousel-control span { margin: 100% 0; }
    link(href='#{baseUrlCdn}/css/font-awesome/font-awesome.min-4.7.0.css', rel='stylesheet')
- if ( currentUrl.indexOf("snippets") > -1 ) {
    body
      include ../includes/navbar-on-top.jade
      
      .container-fluid
        .row.starter-template
          a.btn.btn-danger.btn-sm.sweet-5#remove(href='#', data-id='#{snippet.id}', data-name='#{snippet.name}', onclick="return false;")
            span.fa.fa-trash-o  Remove
          | 
          a.btn.btn-primary.btn-sm(href='/snippets/#{snippet.id}/edit')
            span.fa.fa-pencil-square-o  Edit
          | 
- }

    li.list-unstyled.container-fluid.ui-sortable-handle(id="body#{rnd}", style="width:100%;", class="col-sm-#{graph_layout}")
      //
      .panel.panel-default
        .panel-heading.handle
           h3.panel-title.pull-left(style="padding: 2px;")
             span.fa(class="#{snippet.icon}")  
             |  #{snippet.name}
           #tooltip(style='border: 1px solid transparent; padding: 5px; margin-left: 50px; background-color: transparent; display: inline;')
 
           span.btn.btn-xs.pull-right.fa.fa-chevron-up(data-toggle="collapse", data-target="#collapseGraph", aria-expanded="true", aria-controls="collapseGraph") 
           span.btn.btn-xs.pull-right.fa.fa-pencil-square-o(href="#", data-toggle="modal", data-target="#editSnippet", title="Edit Snippet")
           span.btn.btn-xs.pull-right.fa.fa-refresh(href="#", onclick="flowGraph#{rnd}(); return false;", title="Refresh Data")
           - if ( currentUrl.indexOf("snippets") < 0 ) {
             a.btn.btn-xs.pull-right.fa.fa-expand(href="./#{flow.id}/graph", title="Expand")
           - }

           div.clearfix

        .panel-body.collapse.in#collapseGraph
          div(id="graph#{rnd}", style='height:300px;')
        .panel-footer 

  #editSnippet.modal.fade(tabindex='-1', role='dialog', aria-labelledby='modalLabel', aria-hidden='true')
    .modal-dialog
      .modal-content
        form
          .modal-header
            button.close(type='button', data-dismiss='modal')
              span(aria-hidden='true') Ã—
              span.sr-only Close
            h3#lineModalLabel.modal-title Customize Graph

          .modal-body.clearfix
            include ../includes/graph_form.jade
            
          .modal-footer
            .btn-group.btn-group-justified(role='group', aria-label='group button')
              .btn-group(role='group')
                button.btn.btn-danger.fa(type='button', data-dismiss='modal', role='button') Close
              .btn-group(role='group')
                span &nbsp;
              .btn-group(role='group')
                button.btn.btn-success.fa.fa-check(type='submit')  Update

- if ( currentUrl.indexOf("snippets") > -1 ) {
    script(src='#{baseUrlCdn}/js/jquery-ui/jquery-ui-1.11.4.min.js')
    script(type='text/javascript', src='#{baseUrlCdn}/js/bootstrap.min.js')
- }
  script(type='text/javascript', src='#{baseUrlCdn}/js/flot/jquery.flot.js')
  script(type='text/javascript', src='#{baseUrlCdn}/js/flot/jquery.flot.time.min.js')
  //-script(type='text/javascript', src='#{baseUrlCdn}/js/flot/jquery.flot.pie.js')
  //-script(type='text/javascript', src='#{baseUrlCdn}/js/flot/jquery.flot.orderBars.js')
  //-script(type='text/javascript', src='#{baseUrlCdn}/js/flot/date.js')
  //-script(type='text/javascript', src='#{baseUrlCdn}/js/flot/jquery.flot.spline.js')
  //-script(type='text/javascript', src='#{baseUrlCdn}/js/flot/jquery.flot.stack.js')
  //-script(type='text/javascript', src='#{baseUrlCdn}/js/flot/curvedLines.js')
  //-script(type='text/javascript', src='#{baseUrlCdn}/js/flot/jquery.flot.resize.js')
  //-script(type='text/javascript', src='#{baseUrlCdn}/js/flot/jquery.flot.threshold.js')
  //-script(type='text/javascript', src='#{baseUrlCdn}/js/chartjs/chart.min.js')
  //-script(type='text/javascript', src='#{baseUrlCdn}/js/sparkline/jquery.sparkline.min.js')
  script.
      getData#{rnd} = function(base, flow_id, type, CType, callback, container, limit, page, sort, start, end, color) {
        $.ajax({
          url: base+flow_id,
          type: type,
          data:{limit: limit, page: page , sort: sort, start: start!==""?start:undefined, end: end!==""?end:undefined},
          success: function(d) {
            if ( options.series && options.series.pie !== undefined ) {
              data[flow_id] = (d.data).map(function(i) {
                //return parseInt(i.attributes.value);
                return i.attributes.value;
              });
            } else {
              data[flow_id] = [(d.data).map(function(i) {
                //return [parseInt(i.attributes.timestamp), parseInt(i.attributes.value)];
                return [i.attributes.timestamp, i.attributes.value];
              })];
            }
            var lastValue = ((d.data)[0].attributes.timestamp);
            var title = d.links.title;
            var unit = d.links.unit;
            callback(data[flow_id], container, flow_id, lastValue, title, unit, color);
          },
          error: function(d) {
            //console.log('ERROR '+base);
            //console.log(d);
            $("#"+container).html("<div class='alert alert-danger'>Error "+d.status+": "+d.statusText+"</div>");
          }
        });
      } // end getData#{rnd}
      
      doGraph#{rnd} = function(data, container, flow_id, lastValue, title, unit, color) {
        var date = new Date(lastValue);
        lastValue = date.getDate()+'/'+(date.getMonth()+1)+'/'+date.getFullYear()+' '+date.getHours()+':'+date.getMinutes();
        options.colors = [color];
        //console.log(container);
        $.plot($('#'+container), data, options);
        $('#'+container).parent().parent().find('div.panel-footer').prepend('<span class="fa fa-clock-o"></span> Last value at '+lastValue);
        //$('#'+container).parent().parent().parent().find('div.panel-heading h3.panel-title').html('<span class="#{snippet.icon}"></span> '+title);
        $('#'+container).bind("plothover", function (event, pos, item) {
          if (item) {
            var xdate = new Date((item.datapoint[0]).toFixed(0)/1);
            date = xdate.getDate()+'/'+(xdate.getMonth()+1)+'/'+xdate.getFullYear()+' '+xdate.getHours()+':'+xdate.getMinutes();
            y = date + ' <span class=\'fa fa-arrow-right\'>&nbsp;</span><b>'+item.datapoint[1].toFixed(2)+unit+'</b>';
            $("#tooltip").html(y).css({backgroundColor: color}).show();
          } else {
            $("#tooltip").hide();
          }
        });
      }; // end doGraph#{rnd}

      if ('#{graph_weekendAreas}' == 'true') {
        weekendAreas = function(axes) {
          var markings = [];
          var d = new Date(axes.xaxis.min);
          // go to the first Saturday
          d.setUTCDate(d.getUTCDate() - ((d.getUTCDay() + 1) % 7))
          d.setUTCSeconds(0);
          d.setUTCMinutes(0);
          d.setUTCHours(0);
          var i = d.getTime();
          do {
            // when we don't set yaxis, the rectangle automatically
            // extends to infinity upwards and downwards
            markings.push({ xaxis: { from: i, to: i + 2 * 24 * 60 * 60 * 1000 } });
            i += 7 * 24 * 60 * 60 * 1000;
          } while (i < axes.xaxis.max);
          return markings;
        }; // end weekendAreas
      };
      
      var d = new Array();
      var data = new Array();
      var options = {};
      
      if ('#{graph_chart_type}' == 'bars') {
        // Show graph as bars
        options = {
          series: { bars: { show: true, align: "center", barWidth: 24 * 15 * 60 * 30, lineWidth: 1 } },
          lines : { show: false, fill: true, lineWidth: 3, steps: false },
          points : { show : true },
          legend: { show: true, position: "sw" },
          grid: { borderWidth: { top: 0, right: 0, bottom: 0, left: 0 }, borderColor: { top: "", right: "", bottom: "", left: "" }, markings: weekendAreas, clickable: true, hoverable: true, autoHighlight: true, mouseActiveRadius: 5 },
          xaxis: { mode: "time", autoscale: true, timeformat: "%d/%m/%Y<br/>%Hh%M" },
          yaxis: [ { autoscale: true, position: "left" }, { autoscale: true, position: "right" } ],
        };
      } else if ('#{graph_chart_type}' == 'lines') {
        // Show graph as lines
        options = {
          series: { lines : { show: true, fill: '#{graph_fill}', lineWidth: 3, steps: false } },
          points : { show : true },
          legend: { show: true, position: "sw" },
          grid: { borderWidth: { top: 0, right: 0, bottom: 0, left: 0 }, borderColor: { top: "", right: "", bottom: "", left: "" }, markings: weekendAreas, clickable: true, hoverable: true, autoHighlight: true, mouseActiveRadius: 5 },
          xaxis: { mode: "time", autoscale: true, timeformat: "%d/%m/%Y<br/>%Hh%M" },
          yaxis: [ { autoscale: true, position: "left" }, { autoscale: true, position: "right" } ],
        };
      } else if ('#{graph_chart_type}' == 'pie') {
        // Show graph as pie
        options = {
          series: { pie : { show: true }, radius: 1, label: { show: true, radius: 2/3 } },
          combine: {color: '#999',threshold: 0.1},
          legend: { show: false, position: "sw" },
          grid: { borderWidth: { top: 0, right: 0, bottom: 0, left: 0 }, borderColor: { top: "", right: "", bottom: "", left: "" }, markings: weekendAreas, clickable: true, hoverable: true, autoHighlight: true, mouseActiveRadius: 5 },
        };
      } else if ('#{graph_chart_type}' == 'donut') {
        // Show graph as rectangular donut
        options = {
          series: { pie : { show: true, radius: 1, innerRadius: .4 }, label: { show: true, formatter: labelFormatter, background: { opacity: 0.5, color: '#000' }, threshold: 0.1 } },
          grid: { hoverable: true, autoHighlight: true },
          legend: { show: false },
        };
      } else if ('#{graph_chart_type}' == 'rectangularpie') {
        // Show graph as rectangular rectangularpie
        options = {
          series: { pie : { show: true, radius: 500 }, label: { show: true, formatter: labelFormatter, background: { opacity: 0.5, color: '#000' }, threshold: 0.1 } },
          grid: { hoverable: true, autoHighlight: true },
          legend: { show: false },
        };
      } else if ('#{graph_chart_type}' == '?????') {
        // Show graph
        options = {
          lines : { show: true, fill: true, lineWidth: 3, steps: false },
          bars: { show: false, align: "center", barWidth: 24 * 15 * 60 * 30, lineWidth: 1 },
          points : { show : true },
          legend: {show: true, position: "sw"},
          grid: { borderWidth: { top: 0, right: 0, bottom: 0, left: 0 }, borderColor: { top: "", right: "", bottom: "", left: "" }, markings: weekendAreas, clickable: true, hoverable: true, autoHighlight: true, mouseActiveRadius: 5 },
          xaxis: { mode: "time", autoscale: true, timeformat: "%d/%m/%Y<br/>%Hh%M" },
          yaxis: [ { autoscale: true, position: "left" }, { autoscale: true, position: "right" } ],
        };
      }
      //console.log(options);
      
      flowGraph#{rnd} = function() {
        var flows = new Array(
          // flow_id, callback, container, limit, page , sort, color
          ["#{snippet.flows[0]}", doGraph#{rnd}, "graph#{rnd}", #{graph_max}, 1, 'desc', '#{graph_startdate2}', '#{graph_enddate2}', '#{graph_color}']
        );
        flows.map(function(f) {
          var flow_id = f[0];
          var callback = f[1];
          var container = f[2];
          var limit = f[3];
          var page = f[4];
          var sort = f[5];
          var start = f[6];
          var end = f[7];
          var color = f[8];
          $("#"+container).append("<div class='fa fa-3x fa-spin fa-refresh' style='margin: 150px 50%'></div>");
          return getData#{rnd}(location.protocol+'//'+location.hostname+(location.port ? ':'+location.port: '')+'/v#{version}/data/', flow_id, 'GET', 'application/json', callback, container, limit, page, sort, start, end, color);
        }); // end
      }
      flowGraph#{rnd}();

  link(href='#{baseUrlCdn}/css/sweetalert/sweetalert.css', rel='stylesheet')
  script(src='#{baseUrlCdn}/js/sweetalert/sweetalert.js')
  script.
    $('.sweet-5').on('click', function (e) {
      var id = $(this).data("id");
      var name = $(this).data("name");
      swal({
        title: "Are you sure?",
        text: "Are you sure to remove "+name+" ?",
        type: "error",
        showCancelButton: true,
        confirmButtonClass: "btn-danger",
        confirmButtonText: "Yes, remove it!",
        cancelButtonText: "No, cancel",
        closeOnConfirm: false,
        closeOnCancel: true
      },
      function(isConfirm) {
        if (isConfirm) {
          document.location.href='/snippets/'+id+'/remove';
        } else {
          //
        }
      });
    });